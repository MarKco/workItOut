package com.ilsecondodasinistra.workitout.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PausesWorking.
*/
public class PauseWorkingDao extends AbstractDao<PauseWorking, Long> {

    public static final String TABLENAME = "PausesWorking";

    /**
     * Properties of entity PauseWorking.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id_pauseworking");
        public final static Property StartDate = new Property(1, long.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(2, long.class, "endDate", false, "END_DATE");
        public final static Property IsLunch = new Property(3, boolean.class, "isLunch", false, "IS_LUNCH");
        public final static Property Id_sessionworking = new Property(4, Long.class, "id_sessionworking", false, "ID_SESSIONWORKING");
    };

    private Query<PauseWorking> sessionWorking_PausesQuery;

    public PauseWorkingDao(DaoConfig config) {
        super(config);
    }
    
    public PauseWorkingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PausesWorking' (" + //
                "'id_pauseworking' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'START_DATE' INTEGER NOT NULL ," + // 1: startDate
                "'END_DATE' INTEGER NOT NULL ," + // 2: endDate
                "'IS_LUNCH' INTEGER NOT NULL ," + // 3: isLunch
                "'ID_SESSIONWORKING' INTEGER);"); // 4: id_sessionworking
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PausesWorking'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PauseWorking entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStartDate());
        stmt.bindLong(3, entity.getEndDate());
        stmt.bindLong(4, entity.getIsLunch() ? 1l: 0l);
 
        Long id_sessionworking = entity.getId_sessionworking();
        if (id_sessionworking != null) {
            stmt.bindLong(5, id_sessionworking);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PauseWorking readEntity(Cursor cursor, int offset) {
        PauseWorking entity = new PauseWorking( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // startDate
            cursor.getLong(offset + 2), // endDate
            cursor.getShort(offset + 3) != 0, // isLunch
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // id_sessionworking
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PauseWorking entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartDate(cursor.getLong(offset + 1));
        entity.setEndDate(cursor.getLong(offset + 2));
        entity.setIsLunch(cursor.getShort(offset + 3) != 0);
        entity.setId_sessionworking(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PauseWorking entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PauseWorking entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pauses" to-many relationship of SessionWorking. */
    public List<PauseWorking> _querySessionWorking_Pauses(Long id_sessionworking) {
        synchronized (this) {
            if (sessionWorking_PausesQuery == null) {
                QueryBuilder<PauseWorking> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id_sessionworking.eq(null));
                sessionWorking_PausesQuery = queryBuilder.build();
            }
        }
        Query<PauseWorking> query = sessionWorking_PausesQuery.forCurrentThread();
        query.setParameter(0, id_sessionworking);
        return query.list();
    }

}
