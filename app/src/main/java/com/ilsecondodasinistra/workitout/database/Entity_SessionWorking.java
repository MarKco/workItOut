package com.ilsecondodasinistra.workitout.database;

import java.util.List;
import com.ilsecondodasinistra.workitout.database.DaoSession;
import de.greenrobot.dao.*;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SessionsWorking.
 */
public class Entity_SessionWorking extends com.ilsecondodasinistra.workitout.classes.SessionWorking  implements java.io.Serializable {

    protected int id_sessionworking;
    /** Not-null value. */
    protected java.util.Date start_date;
    /** Not-null value. */
    protected java.util.Date end_date;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient Entity_SessionWorkingDao myDao;

    protected List<Entity_PauseWorking> pauses;

    public Entity_SessionWorking() {
    }

    public Entity_SessionWorking(int id_sessionworking) {
        this.id_sessionworking = id_sessionworking;
    }

    public Entity_SessionWorking(int id_sessionworking, java.util.Date start_date, java.util.Date end_date) {
        this.id_sessionworking = id_sessionworking;
        this.start_date = start_date;
        this.end_date = end_date;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEntity_SessionWorkingDao() : null;
    }

    public int getId_sessionworking() {
        return id_sessionworking;
    }

    public void setId_sessionworking(int id_sessionworking) {
        this.id_sessionworking = id_sessionworking;
    }

    /** Not-null value. */
    public java.util.Date getStart_date() {
        return start_date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStart_date(java.util.Date start_date) {
        this.start_date = start_date;
    }

    /** Not-null value. */
    public java.util.Date getEnd_date() {
        return end_date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEnd_date(java.util.Date end_date) {
        this.end_date = end_date;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Entity_PauseWorking> getPauses() {
        if (pauses == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Entity_PauseWorkingDao targetDao = daoSession.getEntity_PauseWorkingDao();
            List<Entity_PauseWorking> pausesNew = targetDao._queryEntity_SessionWorking_Pauses(id_sessionworking);
            synchronized (this) {
                if(pauses == null) {
                    pauses = pausesNew;
                }
            }
        }
        return pauses;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPauses() {
        pauses = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
